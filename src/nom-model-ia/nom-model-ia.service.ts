import { Injectable } from '@nestjs/common';
import OpenAI from 'openai';

@Injectable()
export class NomModelIaService {
  private openai: OpenAI;

  constructor() {
    this.openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY || 'YOUR_OPENAI_API_KEY_HERE',
    });
  }

  async describeImage(imageBuffer: Buffer, filename: string): Promise<string> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text:
                  'D√©cris cette ferme et ses produits √† partir des photos envoy√©es. \n' +
                  'Ton objectif est de r√©diger une description attrayante et naturelle \n' +
                  'pour une application qui met en valeur les fermes et leurs produits agricoles.\n' +
                  '\n' +
                  '- Utilise un ton professionnel, chaleureux et authentique.\n' +
                  '- Mets en avant les atouts visuels : paysages, animaux, cultures, produits, etc.\n' +
                  '- D√©cris les couleurs, la qualit√© et l‚Äôambiance du lieu.\n' +
                  '- Si tu reconnais un animal ou un produit, parle-en sans exag√©rer.\n' +
                  '- Reste concis (5 √† 8 phrases maximum) et √©cris en fran√ßais naturel.\n' +
                  '- N‚Äôinvente pas de d√©tails qui ne sont pas visibles sur la photo.',
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 1000,
      });

      return response.choices[0]?.message?.content || 'Impossible de d√©crire l\'image';
    } catch (error) {
      console.error('Erreur lors de la description de l\'image:', error);
      throw new Error('Erreur lors de l\'analyse de l\'image');
    }
  }

  async analyzeAgriculture(imageBuffer: Buffer, filename: string): Promise<string> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: 'Tu es un expert en agriculture. Analyse cette image et donne des conseils agricoles sp√©cifiques, des recommandations pour am√©liorer les cultures, et identifie les probl√®mes potentiels. R√©ponds en fran√ßais.',
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 1500,
      });

      return response.choices[0]?.message?.content || 'Impossible d\'analyser l\'image agricole';
    } catch (error) {
      console.error('Erreur lors de l\'analyse agricole:', error);
      throw new Error('Erreur lors de l\'analyse agricole');
    }
  }

  async generateSocialMediaCaptions(imageBuffer: Buffer, filename: string): Promise<object> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `Tu es un expert en marketing digital et r√©seaux sociaux. Analyse cette image et g√©n√®re des l√©gendes optimis√©es pour chaque plateforme :

- TikTok : L√©gende fun, virale, avec hashtags tendance
- Instagram : L√©gende inspirante, esth√©tique, avec hashtags lifestyle
- Facebook : L√©gende informative, communautaire, avec hashtags engagement
- Twitter : L√©gende concise, professionnelle, avec hashtags actualit√©

R√©ponds UNIQUEMENT avec un JSON structur√© sous cette forme :
{
  "tiktok": "l√©gende tiktok",
  "instagram": "l√©gende instagram", 
  "facebook": "l√©gende facebook",
  "twitter": "l√©gende twitter"
}`,
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 2000,
      });

      const content = response.choices[0]?.message?.content || '{}';
      let cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      
      try {
        const parsedContent = JSON.parse(cleanContent);
        
        const extractText = (caption: any): string => {
          if (typeof caption === 'string') {
            return caption;
          }
          if (caption && typeof caption === 'object' && caption.caption) {
            return caption.caption;
          }
          return String(caption);
        };

        return {
          tiktok: extractText(parsedContent.tiktok),
          instagram: extractText(parsedContent.instagram),
          facebook: extractText(parsedContent.facebook),
          twitter: extractText(parsedContent.twitter),
        };
      } catch (parseError) {
        console.error('Erreur de parsing JSON:', parseError);
        return {
          tiktok: 'L√©gende TikTok g√©n√©r√©e',
          instagram: 'L√©gende Instagram g√©n√©r√©e',
          facebook: 'L√©gende Facebook g√©n√©r√©e',
          twitter: 'L√©gende Twitter g√©n√©r√©e',
        };
      }
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration des l√©gendes:', error);
      throw new Error('Erreur lors de la g√©n√©ration des l√©gendes');
    }
  }

  async generateMarketingDescription(imageBuffer: Buffer, filename: string, location?: string, ip?: string): Promise<object> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const contextualData = {
        weather: {
          condition: 'ensoleill√©',
          temperature: 22,
          humidity: 65,
          season: 'automne',
          agricultural_impact: 'Conditions id√©ales pour les semis d\'automne',
        },
        news: {
          articles: [
            'S√©cheresse exceptionnelle dans le Sud-Ouest de la France',
            'Prix du bl√© en hausse de 15% cette semaine',
            'Nouvelle r√©glementation bio europ√©enne en vigueur',
          ],
          market_trends: 'Demande croissante pour les produits bio et durables',
        },
        geolocation: {
          country: 'France',
          region: 'Nouvelle-Aquitaine',
          city: 'Bordeaux',
          agricultural_zone: 'Zone temp√©r√©e - Agriculture c√©r√©ali√®re et viticole',
        },
        timestamp: new Date().toISOString(),
      };

      const contextualPrompt = `
Tu es un expert en r√©daction marketing et e-commerce sp√©cialis√© dans l'agriculture. Ta mission est de d√©crire de mani√®re commerciale un produit √† partir de l'image fournie, en int√©grant le contexte actuel pour rendre la description ultra-pertinente.

CONTEXTE ACTUEL :
- M√©t√©o : ${contextualData.weather.condition} (${contextualData.weather.temperature}¬∞C, humidit√© ${contextualData.weather.humidity}%)
- Saison : ${contextualData.weather.season} (${contextualData.weather.agricultural_impact})
- Actualit√©s agricoles : ${contextualData.news.articles.join(', ')}
- Tendances du march√© : ${contextualData.news.market_trends}
- G√©olocalisation : ${contextualData.geolocation.city}, ${contextualData.geolocation.region}, ${contextualData.geolocation.country} (${contextualData.geolocation.agricultural_zone})

Contraintes pour la description marketing :
- Propose un TITRE accrocheur et professionnel, adapt√© au contexte.
- Fournis une DESCRIPTION COURTE (1 phrase) pour une fiche produit, int√©grant le contexte.
- Fournis une DESCRIPTION LONGUE (3 √† 5 phrases) orient√©e b√©n√©fices, en utilisant le contexte pour souligner la pertinence du produit.
- Liste 3 √† 5 ARGUMENTS sous forme de bullet points avec des emojis ‚úÖ, üî• ou ‚≠ê, directement li√©s au contexte actuel.
- Termine par un CALL TO ACTION adapt√© √† la cible et au contexte.

Style attendu : professionnel, rassurant pour l'agriculture, et tr√®s pertinent par rapport au contexte fourni.
Langue : FR

IMPORTANT: R√©ponds UNIQUEMENT avec un JSON structur√© sous cette forme :
{
  "title": "Titre accrocheur",
  "short_description": "Description courte",
  "long_description": "Description longue orient√©e b√©n√©fices",
  "selling_points": ["Argument 1", "Argument 2", "Argument 3"],
  "call_to_action": "Call to action adapt√©"
}
`;

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: contextualPrompt,
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 2000,
      });

      const content = response.choices[0]?.message?.content || '{}';
      let cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      
      try {
        const parsedContent = JSON.parse(cleanContent);
        return {
          ...parsedContent,
          context: contextualData,
        };
      } catch (parseError) {
        console.error('Erreur de parsing JSON marketing:', parseError);
        return {
          title: 'Produit agricole de qualit√©',
          short_description: 'Solution innovante pour l\'agriculture moderne',
          long_description: 'Ce produit r√©volutionnaire r√©pond aux d√©fis actuels de l\'agriculture durable. Con√ßu pour maximiser les rendements tout en respectant l\'environnement, il s\'int√®gre parfaitement dans votre strat√©gie agricole.',
          selling_points: [
            '‚úÖ Technologie de pointe',
            'üî• R√©sultats garantis',
            '‚≠ê Qualit√© certifi√©e',
          ],
          call_to_action: 'D√©couvrez d√®s maintenant les avantages de cette solution !',
          context: contextualData,
        };
      }
    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration marketing:', error);
      throw new Error('Erreur lors de la g√©n√©ration de la description marketing');
    }
  }

  async generateVeterinaryDiagnosis(imageBuffer: Buffer, filename: string): Promise<object> {
    try {
      const base64Image = imageBuffer.toString('base64');
      
      const validationResponse = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `Tu es un expert en validation d'images pour l'analyse v√©t√©rinaire d'animaux d'√©levage.

R√àGLES STRICTES - VALIDATION AUTOMATIQUE :
- ‚úÖ ACCEPTER UNIQUEMENT : Ch√®vres, bovins, ovins (moutons, brebis, b√©liers) visibles dans l'image
- ‚úÖ ACCEPTER UNIQUEMENT : Mat√©riel agricole sp√©cifique √† la sant√© des troupeaux
- ‚úÖ ACCEPTER UNIQUEMENT : Contexte agricole avec animaux d'√©levage pr√©sents

- ‚ùå REFUSER ABSOLUMENT : Toute image contenant des humains (m√™me partiellement)
- ‚ùå REFUSER ABSOLUMENT : Toute image contenant des voitures, tracteurs, v√©hicules
- ‚ùå REFUSER ABSOLUMENT : Toute image contenant des chats, chiens, oiseaux domestiques
- ‚ùå REFUSER ABSOLUMENT : Toute image de paysage sans animaux d'√©levage
- ‚ùå REFUSER ABSOLUMENT : Toute image d'objets sans rapport avec l'√©levage
- ‚ùå REFUSER ABSOLUMENT : Toute image sans animaux d'√©levage visibles

IMPORTANT : Si tu vois UN SEUL humain, v√©hicule, ou animal domestique, tu DOIS refuser l'image.

Analyse cette image et d√©termine si elle contient UNIQUEMENT des animaux d'√©levage (ch√®vres, bovins, ovins).

R√©ponds UNIQUEMENT avec un JSON structur√© :
{
  "isValid": true/false,
  "reason": "Description pr√©cise de ce qui est visible",
  "confidence": 0.0-1.0,
  "detectedAnimals": ["liste des animaux d'√©levage d√©tect√©s"],
  "inappropriateElements": ["√©l√©ments inappropri√©s d√©tect√©s (humains, v√©hicules, etc.)"]
}`,
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 500,
      });

      const validationContent = validationResponse.choices[0]?.message?.content || '{}';
      let cleanValidationContent = validationContent.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      
      let validationResult;
      try {
        validationResult = JSON.parse(cleanValidationContent);
      } catch (error) {
        console.error('Erreur de parsing validation:', error);
        validationResult = { isValid: false, reason: 'Erreur lors de l\'analyse de l\'image', confidence: 0 };
      }

      console.log('üîç R√©sultat validation:', validationResult);

      if (!validationResult.isValid) {
        return {
          error: 'Image hors contexte agricole',
          message: 'Je suis sp√©cialis√© dans l\'analyse d\'animaux d\'√©levage (ch√®vres, bovins, ovins). Merci de fournir une image en lien avec ce domaine.',
          timestamp: new Date().toISOString()
        };
      }

      const response = await this.openai.chat.completions.create({
        model: 'gpt-4o',
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                text: `Tu es un v√©t√©rinaire expert sp√©cialis√© dans l'√©levage de troupeaux (ch√®vres, bovins, ovins). Ta mission : analyser des images ou des descriptions textuelles d'animaux et fournir un **diagnostic pr√©cis et actionnable** comme le ferait un v√©t√©rinaire professionnel.

Pour chaque analyse, tu dois g√©n√©rer une r√©ponse structur√©e, claire et prioris√©e :

1Ô∏è‚É£ **Description clinique** : D√©cris l'√©tat observ√© du ou des animaux (pelage, posture, respiration, comportement...).
2Ô∏è‚É£ **Diagnostic probable** : Indique l'hypoth√®se m√©dicale la plus probable.
3Ô∏è‚É£ **Actions urgentes (üî¥)** : Ce qu'il faut r√©aliser imm√©diatement.
4Ô∏è‚É£ **Actions recommand√©es (üü°)** : Ce qui doit √™tre fait selon le contexte.
5Ô∏è‚É£ **Points √† surveiller (üü¢)** : Observations √† suivre dans le temps.
6Ô∏è‚É£ **Sources** : Cite toujours des r√©f√©rences fiables (INRAE, IFIP, FAO‚Ä¶).

Format de sortie attendu (JSON) :
{
  "description": "...",
  "diagnostic_probable": "...",
  "actions": {
    "urgent": [{"action": "...", "reason": "...", "source": "..."}],
    "recommended": [{"action": "...", "reason": "...", "source": "..."}],
    "monitor": [{"action": "...", "reason": "...", "source": "..."}]
  },
  "confiance": "..."
}

üîπ Si tu n'es pas s√ªr, propose plusieurs hypoth√®ses.
üîπ Priorise toujours les actions par gravit√©.
üîπ Utilise un langage clair et professionnel, compr√©hensible par un √©leveur.`,
              },
              {
                type: 'image_url',
                image_url: {
                  url: `data:image/jpeg;base64,${base64Image}`,
                },
              },
            ],
          },
        ],
        max_tokens: 2000,
      });

      const content = response.choices[0]?.message?.content || '{}';
      let cleanContent = content.replace(/```json\n?/g, '').replace(/```\n?/g, '').trim();
      
      try {
        const parsedContent = JSON.parse(cleanContent);
        return {
          success: true,
          filename,
          diagnosis: parsedContent,
          timestamp: new Date().toISOString(),
          fileSize: imageBuffer.length,
        };
      } catch (parseError) {
        console.error('Erreur de parsing JSON v√©t√©rinaire:', parseError);
        return {
          success: true,
          filename,
          diagnosis: {
            description: 'Analyse v√©t√©rinaire en cours...',
            diagnostic_probable: 'Consultation v√©t√©rinaire recommand√©e',
            actions: {
              urgent: [
                {
                  action: 'Consulter un v√©t√©rinaire imm√©diatement',
                  reason: 'Diagnostic n√©cessitant une expertise professionnelle',
                  source: 'Ordre des v√©t√©rinaires'
                }
              ],
              recommended: [
                {
                  action: 'Surveiller l\'√©tat g√©n√©ral du troupeau',
                  reason: 'Pr√©vention et suivi sanitaire',
                  source: 'INRAE'
                }
              ],
              monitor: [
                {
                  action: 'Observer le comportement et l\'app√©tit',
                  reason: 'D√©tection pr√©coce de probl√®mes',
                  source: 'IFIP'
                }
              ]
            },
            confiance: 'Faible - Consultation professionnelle requise',
            timestamp: new Date().toISOString()
          },
          timestamp: new Date().toISOString(),
          fileSize: imageBuffer.length,
        };
      }
    } catch (error) {
      console.error('Erreur lors du diagnostic v√©t√©rinaire:', error);
      throw new Error('Erreur lors du diagnostic v√©t√©rinaire');
    }
  }

  async healthCheck(): Promise<object> {
    return {
      status: 'OK',
      service: 'NomModelIaService',
      timestamp: new Date().toISOString(),
      version: '1.0.0',
    };
  }
}
